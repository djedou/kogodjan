var searchIndex = JSON.parse('{\
"kongodjan":{"doc":"","i":[[0,"architectures","kongodjan","",null,null],[0,"perceptron","kongodjan::architectures","",null,null],[3,"FullConnectedLayer","kongodjan::architectures::perceptron","",null,null],[11,"new","","create a new full connected layer n_inputs is the numberâ€¦",0,[[["activator",6],["activatorderiv",6]]]],[0,"neural_traits","kongodjan","",null,null],[8,"LayerT","kongodjan::neural_traits","",null,null],[10,"get_weights","","get the weights of the neurons in the layer",1,[[],["arrayd",6]]],[10,"get_biases","","get the biases of the neurons in the layer",1,[[],["arrayd",6]]],[10,"forward","","",1,[[["arrayd",6]],["arrayd",6]]],[10,"backward","","",1,[[["arrayd",6],["gradient",6]],["arrayd",6]]],[8,"NetworkT","","",null,null],[10,"train","","",2,[[["networkerrorfunction",6]]]],[0,"networks","kongodjan","",null,null],[3,"Network","kongodjan::networks","build a neural network ",null,null],[11,"new","","",3,[[["vec",3],["vec",3],["arrayd",6]],["network",3]]],[0,"activations","kongodjan","",null,null],[5,"hardlim","kongodjan::activations","Hard Limit",null,[[]]],[5,"hardlimsym","","Symmetrical Hard Limit",null,[[]]],[5,"purelin","","Linear",null,[[]]],[5,"satlin","","Saturating Linear",null,[[]]],[5,"satlinsym","","Symmetric Saturating Linear",null,[[]]],[5,"logsig","","Log-Sigmoid",null,[[]]],[5,"tansig","","Hyperbolic Tangent Sigmoid",null,[[]]],[5,"tansig_deriv","","",null,[[]]],[5,"poslin","","Positive Linear",null,[[]]],[6,"Activator","","",null,null],[6,"ActivatorDeriv","","",null,null],[17,"FLOAT_SIZE_100","","",null,null],[17,"FLOAT_SIZE_1000","","",null,null],[17,"FLOAT_SIZE_10000","","",null,null],[0,"errors","kongodjan","",null,null],[5,"single_neuron_error_func","kongodjan::errors","each neuron in the output layer learns its own error",null,[[["arrayd",6],["arrayd",6]]]],[5,"others_layers_gradient","","",null,[[]]],[5,"last_layer_gradient","","",null,[[]]],[6,"NetworkErrorFunction","","",null,null],[6,"Gradient","","",null,null],[11,"from","kongodjan::architectures::perceptron","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","kongodjan::networks","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"get_weights","kongodjan::architectures::perceptron","",0,[[],["arrayd",6]]],[11,"get_biases","","",0,[[],["arrayd",6]]],[11,"forward","","",0,[[["arrayd",6]],["arrayd",6]]],[11,"backward","","",0,[[["arrayd",6],["gradient",6]],["arrayd",6]]],[11,"train","kongodjan::networks","",3,[[["networkerrorfunction",6]]]],[11,"clone","kongodjan::architectures::perceptron","",0,[[],["fullconnectedlayer",3]]],[11,"clone","kongodjan::networks","",3,[[],["network",3]]],[11,"fmt","kongodjan::architectures::perceptron","",0,[[["formatter",3]],["result",6]]],[11,"fmt","kongodjan::networks","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"FullConnectedLayer"],[8,"LayerT"],[8,"NetworkT"],[3,"Network"]]},\
"kongodjan_test":{"doc":"","i":[[5,"main","kongodjan_test","",null,[[]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);